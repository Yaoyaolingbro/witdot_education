import { useState, useRef, useEffect } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import BlocklyEditor from '@/components/blockly/BlocklyEditor';
import { imageRecognitionToolbox } from '@/blockly/toolbox';
import { javascriptGenerator } from 'blockly/javascript';
import axios from 'axios';
import { useToast } from '@/components/common/Toast';

const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:3000/api';

/**
 * 图像识别画板页面
 * 学生可以上传图片，使用 Blockly 构建图像识别 Agent
 */
export default function ImageRecognition() {
  const navigate = useNavigate();
  const { success, error: showError, warning } = useToast();
  const [searchParams] = useSearchParams();
  const projectId = searchParams.get('projectId');

  const [uploadedImage, setUploadedImage] = useState(null);
  const [imageBase64, setImageBase64] = useState('');
  const [result, setResult] = useState('');
  const [isRunning, setIsRunning] = useState(false);
  const [blocksJson, setBlocksJson] = useState('');
  const [generatedCode, setGeneratedCode] = useState('');
  const [currentProject, setCurrentProject] = useState(null);
  const [activeTab, setActiveTab] = useState('result'); // 'result', 'code', 'log'
  const [executionLog, setExecutionLog] = useState([]);
  const [isDragging, setIsDragging] = useState(false);
  const fileInputRef = useRef(null);

  // 默认的 Blockly 模板（图像识别固定 Agent）
  const defaultBlocks = {
    blocks: {
      languageVersion: 0,
      blocks: [
        {
          type: 'io_display_result',
          id: 'display_block',
          x: 50,
          y: 50,
          inputs: {
            RESULT: {
              block: {
                type: 'ai_image_recognition',
                id: 'ai_block',
                inputs: {
                  IMAGE: {
                    block: {
                      type: 'io_upload_image',
                      id: 'upload_block'
                    }
                  },
                  PROMPT: {
                    shadow: {
                      type: 'text_value',
                      id: 'prompt_block',
                      fields: {
                        TEXT: '请详细描述这张图片的内容，用小学生能理解的语言'
                      }
                    }
                  }
                }
              }
            }
          }
        }
      ]
    }
  };

  // 加载项目（如果 URL 中有 projectId）
  useEffect(() => {
    if (projectId) {
      loadProject(projectId);
    }
  }, [projectId]);

  // 加载项目
  const loadProject = async (id) => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get(`${API_URL}/projects/${id}`, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });

      const project = response.data.project;
      setCurrentProject(project);
      setBlocksJson(project.blocksJson);
    } catch (error) {
      console.error('Failed to load project:', error);
      showError('加载项目失败');
    }
  };

  // 添加日志
  const addLog = (message, type = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    setExecutionLog(prev => [...prev, { timestamp, message, type }]);
  };

  // 处理图片上传
  const handleImageUpload = (file) => {
    if (!file) return;

    // 限制文件大小为 5MB
    if (file.size > 5 * 1024 * 1024) {
      warning('图片大小不能超过 5MB');
      return;
    }

    // 限制文件类型
    if (!file.type.startsWith('image/')) {
      warning('只能上传图片文件');
      return;
    }

    // 预览图片
    const reader = new FileReader();
    reader.onload = (event) => {
      setUploadedImage(event.target.result);

      // 转换为 base64（去掉 data:image/xxx;base64, 前缀）
      const base64 = event.target.result.split(',')[1];
      setImageBase64(base64);
      addLog('图片上传成功', 'success');
    };
    reader.readAsDataURL(file);
  };

  // 文件输入change
  const handleFileInputChange = (e) => {
    const file = e.target.files?.[0];
    handleImageUpload(file);
  };

  // 拖拽处理
  const handleDragOver = (e) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    setIsDragging(false);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setIsDragging(false);

    const file = e.dataTransfer.files?.[0];
    handleImageUpload(file);
  };

  // 运行 Blockly Agent
  const handleRunAgent = async () => {
    if (!uploadedImage) {
      warning('请先上传图片');
      return;
    }

    if (!blocksJson) {
      warning('请先在画布上创建积木逻辑');
      return;
    }

    setIsRunning(true);
    setResult('AI 正在分析图片...');

    try {
      // 执行环境：提供自定义函数供 Blockly 生成的代码调用
      const executionContext = {
        getUploadedImage: () => imageBase64,
        recognizeImage: async (imageData, prompt) => {
          const response = await axios.post(`${API_URL}/ai/image-recognition`, {
            imageBase64: imageData,
            prompt
          }, {
            headers: {
              Authorization: `Bearer ${localStorage.getItem('token')}`
            }
          });
          return response.data.result;
        },
        displayResult: (content) => {
          setResult(content);
        },
        wait: (seconds) => {
          return new Promise(resolve => setTimeout(resolve, seconds * 1000));
        },
        getUserInput: async (message) => {
          return prompt(message) || '';
        },
        generateText: async (prompt) => {
          const response = await axios.post(`${API_URL}/ai/text-generate`, {
            prompt
          }, {
            headers: {
              Authorization: `Bearer ${localStorage.getItem('token')}`
            }
          });
          return response.data.result;
        }
      };

      // 使用 AsyncFunction 执行生成的代码
      const AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;
      const executeCode = new AsyncFunction(
        ...Object.keys(executionContext),
        generatedCode
      );

      // 执行代码
      await executeCode(...Object.values(executionContext));

    } catch (error) {
      console.error('执行失败:', error);
      setResult(`执行失败: ${error.message || '未知错误'}`);
    } finally {
      setIsRunning(false);
    }
  };

  // 保存项目
  const handleSaveProject = async () => {
    if (!blocksJson) {
      warning('没有可保存的内容');
      return;
    }

    // 如果是更新已有项目
    if (currentProject) {
      try {
        await axios.put(`${API_URL}/projects/${currentProject._id}`, {
          title: currentProject.title,
          description: currentProject.description,
          blocksJson
        }, {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`
          }
        });

        success('保存成功！');
      } catch (error) {
        console.error('保存失败:', error);
        showError('保存失败，请重试');
      }
      return;
    }

    // 创建新项目
    const projectName = prompt('请输入项目名称', '图像识别助手');
    if (!projectName) return;

    try {
      const response = await axios.post(`${API_URL}/projects`, {
        title: projectName,
        description: '使用 AI 识别图片内容',
        category: 'imageRecognition',
        blocksJson
      }, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem('token')}`
        }
      });

      // 保存成功后，更新当前项目状态并修改 URL
      const savedProject = response.data.project;
      setCurrentProject(savedProject);
      window.history.replaceState(null, '', `/canvas/image-recognition?projectId=${savedProject._id}`);

      success('保存成功！');
    } catch (error) {
      console.error('保存失败:', error);
      showError('保存失败，请重试');
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* 顶部操作栏 */}
      <div className="bg-white border-b shadow-sm">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <button
                onClick={() => navigate('/canvas')}
                className="px-4 py-2 text-gray-600 hover:text-gray-900"
              >
                ← 返回
              </button>
              <h1 className="text-2xl font-bold text-gray-800">
                🖼️ 图像识别画板
              </h1>
              <span className="px-3 py-1 bg-purple-100 text-purple-700 rounded-full text-sm">
                固定 Agent 示例
              </span>
            </div>

            <div className="flex gap-3">
              <button
                onClick={handleSaveProject}
                className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition"
              >
                💾 保存项目
              </button>
              <button
                onClick={handleRunAgent}
                disabled={isRunning || !uploadedImage}
                className="px-6 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition font-medium"
              >
                {isRunning ? '⚙️ 运行中...' : '▶️ 运行 Agent'}
              </button>
            </div>
          </div>

          <p className="mt-2 text-sm text-gray-600">
            💡 提示：上传图片后，点击"运行 Agent"让 AI 识别图片内容。你可以修改提示词来改变识别方式。
          </p>
        </div>
      </div>

      {/* 主内容区 */}
      <div className="container mx-auto px-4 py-6">
        {/* 顶部：识别结果显示区 */}
        <div className="mb-6 bg-white rounded-lg shadow-sm border p-6">
          <h2 className="text-lg font-semibold text-gray-800 mb-3">
            📺 识别结果
          </h2>

          {result ? (
            <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
              <p className="text-gray-800 whitespace-pre-wrap text-base leading-relaxed">{result}</p>
            </div>
          ) : (
            <div className="text-center py-12 text-gray-400">
              <div className="text-5xl mb-3">🤖</div>
              <p>运行 Agent 后，AI 识别结果将显示在这里</p>
            </div>
          )}
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* 左侧：Blockly 编辑器 */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-lg shadow-sm border p-4">
              <div className="flex items-center justify-between mb-3">
                <h2 className="text-lg font-semibold text-gray-800">
                  🧩 积木编程区
                </h2>
                <span className="text-xs text-gray-500">
                  拖拽积木到工作区，修改提示词
                </span>
              </div>

              <div className="border rounded-lg overflow-hidden" style={{ height: '600px' }}>
                <BlocklyEditor
                  initialBlocks={currentProject ? currentProject.blocksJson : JSON.stringify(defaultBlocks)}
                  toolbox={imageRecognitionToolbox}
                  onWorkspaceChange={setBlocksJson}
                  onCodeGenerate={setGeneratedCode}
                  readOnly={false}
                />
              </div>
            </div>
          </div>

          {/* 右侧：图片上传 */}
          <div className="space-y-6">
            {/* 图片上传区 */}
            <div className="bg-white rounded-lg shadow-sm border p-4">
              <h2 className="text-lg font-semibold text-gray-800 mb-3">
                📤 上传图片
              </h2>

              <input
                ref={fileInputRef}
                type="file"
                accept="image/*"
                onChange={handleImageUpload}
                className="hidden"
              />

              <button
                onClick={() => fileInputRef.current?.click()}
                className="w-full px-4 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition font-medium"
              >
                选择图片
              </button>

              {uploadedImage && (
                <div className="mt-4">
                  <p className="text-sm text-gray-600 mb-2">预览：</p>
                  <img
                    src={uploadedImage}
                    alt="Uploaded"
                    className="w-full rounded-lg border"
                  />
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
